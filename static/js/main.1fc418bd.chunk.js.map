{"version":3,"sources":["components/Cogna_Logo.png","components/HomepageImage.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomepageImage","src","logo","className","alt","Form","state","name","email","number","message","change","e","setState","target","value","onSubmit","preventDefault","props","placeholder","this","onChange","onClick","React","Component","App","fields","console","log","payload","method","headers","Accept","body","JSON","stringify","fetch","mode","then","response","ok","Error","text","catch","error","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,wC,8MCe5BC,MAXf,WAMI,OACI,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,U,OCT5BC,E,4MAEjBC,MAAQ,CACJC,KAAM,GACNC,MAAO,GACPC,OAAQ,GACRC,QAAS,I,EAIbC,OAAS,SAAAC,GACL,EAAKC,SAAL,eACKD,EAAEE,OAAOP,KAAOK,EAAEE,OAAOC,S,EAGlCC,SAAW,SAAAJ,GAEPA,EAAEK,iBACF,EAAKC,MAAMF,SAAS,EAAKV,OAEzB,EAAKO,SAAS,CACVN,KAAM,GACNC,MAAO,GACPC,OAAQ,GACRC,QAAS,M,uDAKN,IAAD,OACN,OACI,8BACI,2BACIH,KAAO,OACPY,YAAc,aACdJ,MAAOK,KAAKd,MAAMC,KAClBc,SAAY,SAAAT,GAAC,OAAI,EAAKD,OAAOC,MAEjC,6BACA,2BACIL,KAAO,QACPY,YAAc,YACdJ,MAAOK,KAAKd,MAAME,MAClBa,SAAY,SAAAT,GAAC,OAAI,EAAKD,OAAOC,MAEjC,6BACA,2BACIL,KAAO,SACPY,YAAc,SACdJ,MAAOK,KAAKd,MAAMG,OAClBY,SAAY,SAAAT,GAAC,OAAI,EAAKD,OAAOC,MAEjC,6BACA,2BACIL,KAAO,UACPY,YAAc,UACdJ,MAAOK,KAAKd,MAAMI,QAClBW,SAAY,SAAAT,GAAC,OAAI,EAAKD,OAAOC,MAEjC,6BAIA,4BAAQU,QAAS,SAAAV,GAAC,OAAI,EAAKI,SAASJ,KAApC,e,GA/DkBW,IAAMC,WC6FzBC,E,4MA/EXnB,MAAQ,CACNoB,OAAQ,I,EAQVV,SAAW,SAAAU,GACP,EAAKb,SAAS,CAAEa,WAChBC,QAAQC,IAAIF,GAOZ,IAKMG,EAAU,CACdC,OAAQ,OACRC,QAPc,CACdC,OAAQ,oCACR,eAAgB,oBAMhBC,KAAMC,KAAKC,UAAUT,IAIvBU,MADe,sCACDP,EAAS,CAACQ,KAAM,YAAYC,MAAK,SAAAC,GAC7C,IAAIA,EAASC,GAGX,MAAM,IAAIC,MAAMF,EAASG,QAFzBf,QAAQC,IAAIW,MAIbI,OAAM,SAAAC,GAAK,OAAIC,MAAMD,O,uDAQjB,IAAD,OACR,OACE,yBAAKzC,UAAU,OAEb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,OAEA,kBAAC,EAAD,CAAMa,SAAY,SAAAU,GAAM,OAAI,EAAKV,SAASU,MAC1C,2BACGQ,KAAKC,UAAUf,KAAKd,MAAMoB,OAAQ,KAAM,S,GAvDnCF,aCFEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMlC,c","file":"static/js/main.1fc418bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Cogna_Logo.a114eb31.png\";","import React from 'react';\nimport logo from './Cogna_Logo.png';\n\n\nfunction HomepageImage() {\n//   const url = 'https://cdn.filestackcontent.com/XYrHCaFGRSaq0EPKY1S6';\n//   return (\n//     <img src={url} style={{width: 650}} alt='Image of Golden Gate Bridge' />\n//   );\n\n    return (\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    );\n}\n\nexport default HomepageImage;","import React from 'react'\n\nexport default class Form extends React.Component {\n\n    state = {\n        name: \"\",\n        email: \"\",\n        number: \"\",\n        message: \"\"\n\n    };\n\n    change = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    onSubmit = e => {\n        // Fields don't show in url\n        e.preventDefault();\n        this.props.onSubmit(this.state)\n        // Clear vlaues after submitting\n        this.setState({\n            name: \"\",\n            email: \"\",\n            number: \"\",\n            message: \"\"\n        });\n    };\n\n\n    render () {\n        return (\n            <form>\n                <input \n                    name = \"name\"\n                    placeholder = \"First name\" \n                    value={this.state.name} \n                    onChange = {e => this.change(e)}\n                />\n                <br />\n                <input \n                    name = \"email\"\n                    placeholder = \"Last name\" \n                    value={this.state.email} \n                    onChange = {e => this.change(e)}                \n                    />\n                <br />\n                <input \n                    name = \"number\"\n                    placeholder = \"number\" \n                    value={this.state.number} \n                    onChange = {e => this.change(e)}                \n                />\n                <br />\n                <input \n                    name = \"message\"\n                    placeholder = \"message\" \n                    value={this.state.message} \n                    onChange = {e => this.change(e)}                \n                />\n                <br />\n\n                \n                \n                <button onClick={e => this.onSubmit(e)}>Submit</button>\n                \n            </form>\n        );\n    }\n};","import React, { Component } from 'react';\nimport './App.css';\nimport HomepageImage from './components/HomepageImage'\nimport Form from './components/Form'\n// import axios from \"axios\"\n\n\n  // function Submit() {\n  //   onSubmit = (fields) => {\n  //     console.log(\"Subscriber info: \", fields)\n  //   };\n  // }\n  \n\nclass App extends Component {\n  \n    state = {\n      fields: {}\n    };\n\n\n    // handleSendEmail = fields => {\n    //   console.log(fields)\n    // }\n\n    onSubmit = fields => {\n        this.setState({ fields });\n        console.log(fields);\n        // axios.post('https://cogna.herokuapp.com/message',  { crossdomain: true }, {fields})\n        //   .then(res => {\n        //     console.log(res);\n        //     console.log(res.data);\n        //   })  \n\n        const headers = {\n          Accept: \"application/json, text/plain, */8\",\n          \"Content-Type\": \"applicaiton/json\",\n        }; \n\n        const payload = {\n          method: \"POST\",\n          headers,\n          body: JSON.stringify(fields)\n        }\n\n        const getURL = 'https://cogna.herokuapp.com/message';\n        fetch(getURL, payload, {mode: 'no-cors'}).then(response => {\n          if (response.ok) {\n            console.log(response);\n          } else {\n            throw new Error(response.text());\n          }\n        }).catch(error => alert(error));\n\n    }\n\n    \n\n\n\n    render () {\n      return (\n        <div className=\"App\">\n          \n          <header className=\"App-header\">\n          <HomepageImage />\n          </header>\n          <Form onSubmit = {fields => this.onSubmit(fields)}/>\n          <p>\n            {JSON.stringify(this.state.fields, null, 2)}\n          </p>\n        </div>\n      );\n    }\n\n}\n\n  // function App() {\n\n  //   onSubmit = (fields) => {\n  //     console.log(\"Subscriber info: \", fields)\n  //   };\n\n  //   return (\n  //     <div className=\"App\">\n        \n  //       <header className=\"App-header\">\n  //       <HomepageImage />\n  //       </header>\n  //       <Form onSubmit = {fields => this.onSubmit(fields)}/>\n  //     </div>\n  //   );\n  // }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}